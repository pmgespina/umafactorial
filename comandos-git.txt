Para guardar el repositorio que vamos a clonar de GitHub en una carpeta determinada, tenemos que abrir la consola y establecer con el comando cd el path donde queremos clonar el repositorio.cd Desktopcd SOFTWARE_AVANZADAcd practicascd individual1PRÁCTICA: USO DE GITgit clone https://github.com/pmgespina/umafactorial.gitcd umafactorial1) Clonamos el repositorio y accedemos al interior del mismo usando de nuevo el comando cdtouch factorial.javagit status2) Creamos el fichero java y lo modificamos escribiendo el código que se nos sugiere en el guion. Hacemos un git status, esperamos que nos aparezca el fichero .java como fichero sin modificar.git add factorial.javagit commit -m “implementacion inicial”git status3) Añadimos el fichero al repositorio con un commit cuyo mensaje especifica que se ha hecho una implementación inicial. Finalmente hacemos un git status para comprobar que el commit se ha hecho correctamente (el fichero factorial.java ya no nos debería de aparecer en rojo)git statusgit add factorial.javagit commit -m “refactorizacion”4) Como en el siguiente paso nos piden modificar el archivo factorial.java, en primer lugar hicimos un git status para comprobar que efectivamente el cambio se había realizado. Después hacemos un git add del fichero factorial.java y finalmente el commit que se nos pide.git branchgit push origin maingit checkout -b recursivo5) Para comprobar el nombre de la rama en la que estamos (el nombre de la rama sobre la que hemos hecho los cambios) hacemos en primer lugar un git branch. Después publicaremos todos los cambios que hemos hecho en la rama actual al repositorio remoto en GitHub. Mediante un único comando en git vamos a crear la nueva rama llamada ‘recursivo’, y además vamos a trasladar el espacio de trabajo a ella. Podríamos haber creado en primer lugar la rama con git branch y después haber modificado el espacio de trabajo mediante un git checkout.git add factorial.javagit commit -m “implementacion recursiva”git push origin recursivo7) Una vez hemos modificado el fichero factorial.java para sustituir la implementación iterativa por una recursiva, vamos a añadir el cambio mediante un git add y a confirmarlo con un git commit. Recordemos que estamos trabajando en la rama recursivo, luego para subir la rama al repositorio remoto en GitHub tendremos que hacer un git push origin recursivo.git checkout maingit branch8) En primer lugar cambiamos la rama de trabajo a la rama principal main. Para comprobar que el cambio se ha hecho correctamente ejecutamos después git branch (nos especifica con un asterisco la rama en la que nos encontramos)git statusgit add factorial.javagit commit -m “correccion numeros negativos”git push origin main10)   Comprobamos primero que el cambio se ha formalizado correctamente con un git status. Después añadimos el cambio y lo confirmamos mediante un git add y un git commit respectivamente. Enviamos los cambios a la rama main en el repositorio remoto.git checkout recursivogit add factorial.javagit commit -m “optimizacion”11) Cambiamos a la rama recursivo en primer lugar. Después modificamos el fichero factorial.java y añadimos y confirmamos sus cambios mediante los comandos ya vistos anteriormente, git add y git commit.git checkout maingit merge recursivogit commit12) Cambiamos desde la rama recursivo a la rama main. Hacemos un merge de la rama recursivo, incorporándola a la rama principal main. Al no establecer ningún mensaje en el merge, el propio git nos escribirá un mensaje por defecto. Por último, hacemos un git commit para confirmar el merge.git branch refacIOgit checkout refacIO13) Creamos la nueva rama y nos trasladamos a ellagit add factorial.javagit commit -m “refactorizacion de metodo de entrada”14) Tras modificar los cambios en el fichero factorial.java vamos a añadir y confirmar los cambiosgit stashgit checkout main15) Guardamos los cambios temporalmente en el stash mediante el comando git stash y volvemos a la rama principal main en la que posteriormente haremos algunos cambios.git add factorial.javagit commit -m “cambio de long a BigInteger”git push origin maingit checkout refacIOgit stash popgit add factorial.javagit commit -m “refactorizacion de método de salida”16)  Guardamos los cambios y los mandamos al repositorio remoto. Cambiamos la rama de trabajo a la que acabamos de guardar en el stash (refacIO) Recuperamos los cambios que guardamos anteriormente en el stash con el git stash pop, y una vez recuperados los añadimos y los confirmamos mediante un git add y un git commit.git checkout maingit merge refacIO17) Salimos a la rama principal y hacemos un merge con la rama que hemos creado en último lugar. Cuando hacemos el merge nos va a salir un error en consola porque se han producido conflictos.git add factorial.javagit commit -m “mezcla de rama refacIO”git push origin main19)  Tras hacer los cambios pertinentes para arreglar los conflictos que quedaron en el antiguo fichero factorial.java, vamos a hacer un git add y git commit del fichero. Por último, enviaremos los cambios al repositorio de GitHub remoto.touch comandos-git.txt20)  Creamos el fichero donde vamos a documentar toda la prácticagit add comandos-git.txtgit commit -m “adicion de historial de linea de comandos”21)  Añadimos el fichero al repositorio y lo confirmamos mediante un commit con el mensaje que nos sugieren en la prácticagit push –all origin22)  Sincronizamos todas las ramas que tenemos en el repositorio local con el repositorio remoto en GitHub